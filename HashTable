
//////////////// FILE HEADER //////////////////////////
//
// Title: HashTable
// Files: HashTable.java, HashTableTest.java MyProfiler.java
// Course: CS400, Summer 2020
// Description : 
//
// Author: Anushka Chandrashekar
// Email: achandrashe4@wisc.edu,
// Lecture Number: 002
///////////////////////////////////////////////////////////////////////////////

/**
 * 
 * hashingAlgorithm : k.getHashCode(); If key is string returns a hash code for
 * this string using following rule where 31 is primeNumber
 * 
 * s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
 * 
 * CollisionResolution : is implemented using chained buckets where each bucket
 * in Hashtable which can contain any number of keys
 * 
 * Chained Buckets: Hashtable contains list of keys at every array index Once we get
 * to bucket we linearly search through list for the desired item
 * 
 * 
 * @author Anushka Chandrashekar
 *
 * @param <K> A Comparable type to be used as a key to an associated value.
 * @param <V> A value associated with the given key.
 */
public class HashTable<K extends Comparable<K>, V> implements HashTableADT<K, V> {

	// default capacity
	private static int DEFAULT_CAPACITY = 50;
	// default load_factor
	private static double DEFAULT_LOAD_FACCTOR = .75;

	// array of Nodes representing buckets in hashtable
	private Node[] arr;

	// List Node to store elements in a bucket
	private class Node {
		private K key;
		private V val;
		private Node next;

		public Node(K key, V val, Node next) {
			this.key = key;
			this.val = val;
			this.next = next;
		}
	}

	// max capacity of table
	private int capacity;
	// current number of items in the hashtable
	private int size;
	// threshold when resize is triggered
	private double loadFactorThreshold;
	// loadfactor of the hashtable
	private double loadFactor;

	/**
	 * Constructor with load factor and threshold Initializes capacity and
	 * loadFactorThreshold to passed value
	 * 
	 * @param initialCapacity
	 * @param loadFactorThreshold
	 */
	@SuppressWarnings("unchecked")
	public HashTable(int initialCapacity, double loadFactorThreshold) {
		if (initialCapacity < 0)
			throw new IllegalArgumentException("Invalid capacity: " + initialCapacity);

		if (loadFactorThreshold <= 0)
			throw new IllegalArgumentException("Invalid load factor: " + loadFactorThreshold);

		arr = (Node[]) new HashTable.Node[initialCapacity];
		this.loadFactorThreshold = loadFactorThreshold;
		this.capacity = initialCapacity;
	}

	/**
	 * Constructor
	 * 
	 * @param initialCapacity
	 */
	public HashTable(int initialCapacity) {
		this(initialCapacity, DEFAULT_LOAD_FACCTOR);
	}

	/**
	 * Constructor with default initial capacity and default load factor
	 */
	public HashTable() {
		this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACCTOR);
	}

	/**
	 * the table is resized to twice the previous size and elements are rehashed by
	 * inserting to the new table again.
	 * 
	 * @throws IllegalNullKeyException
	 */
	private void resize() throws IllegalNullKeyException {
		if (arr.length == 0) {
			return;
		}
		if (size * 1.0 / arr.length <= loadFactorThreshold) {
			return;
		}

		int N = arr.length;

		HashTable<K, V> temp = new HashTable<>(2 * N);
		for (int i = 0; i < capacity; i++) {
			Node current = arr[i];
			while (current != null) {
				// reinsert in to new table
				temp.insert(current.key, current.val);
				current = current.next;
			}
		}
		this.capacity = temp.capacity;
		this.size = temp.size;
		this.arr = temp.arr;
	}

	/**
	 * 
	 * Add the key,value pair to the data structure and increase the number of keys.
	 * If key is already in data structure, replace value with new value
	 * 
	 * @exception If key is null, throw IllegalNullKeyException
	 */
	@Override
	public void insert(K key, V value) throws IllegalNullKeyException {
		if (key == null) {
			throw new IllegalNullKeyException();
		}
		// get node at index
		Node n = getNode(key);

		if (n != null) {
			// if value is same replace value
			n.val = value;
		} else {
			// add new Node at beginning at that location
			int loc = getIndex(key, arr.length);
			arr[loc] = new Node(key, value, arr[loc]);
		}
		++size;
		resize();
	}

	/**
	 * Get Node associated with given Key in the hashtable
	 * 
	 * @param key
	 * @return
	 */
	public Node getNode(K key) {
		int index = getIndex(key, capacity);
		if (index < 0) {
			return null;
		}
		// get the node at the index
		Node node = arr[index];

		// check if the key matches
		// there could be list of nodes
		while (node != null) {
			if (key.equals(node.key)) {
				return node;
			}
			node = node.next;
		}
		return null;
	}

	/**
	 * Get index of the key in the hashtable using hashCode method
	 * 
	 * 
	 * hashcode: get hashCode of the object and then multiply by a prime number
	 * 
	 * @param key
	 * @param numBuckets
	 * @return
	 */
	private int getIndex(K key, int numBuckets) {
		int hash = key.hashCode();
		return (int) (hash % arr.length);
	}

	/**
	 * If key is found, remove the key,value pair from the data structure decrease
	 * number of keys. return true
	 * 
	 * If key is not found, return false
	 * 
	 * @return If key is null, throw IllegalNullKeyException
	 */
	@Override
	public boolean remove(K key) throws IllegalNullKeyException {
		if (key == null)
			throw new IllegalNullKeyException();
		if (arr.length == 0) {
			return false;
		}
		int index = getIndex(key, capacity);
		Node node = arr[index];
		if (node == null) {
			return false;
		}
		if (key.equals(node.key)) {
			arr[index] = null;
			--size;
			return true;
		}

		else {
			Node current = node;
			Node next = current.next;

			while (next != null) {
				if (key.equals(next.key)) {
					current.next = next.next;
					--size;
					return true;
				}
				current = current.next;
				next = current.next;
			}
		}
		return false;
	}

	/**
	 * Returns the value associated with the specified key Does not remove key or
	 * decrease number of keys
	 * 
	 * @exception If key is null, throw IllegalNullKeyException
	 * @exception If key is not found, throw KeyNotFoundException().
	 */
	@Override
	public V get(K key) throws IllegalNullKeyException, KeyNotFoundException {
		if (key == null)
			throw new IllegalNullKeyException();
		Node e = getNode(key);
		if (e == null) {
			throw new KeyNotFoundException();
		} else {
			return e.val;
		}
	}

	/**
	 * Returns the number of key,value pairs in the data structure
	 */
	@Override
	public int numKeys() {
		return size;
	}

	/**
	 * Returns the load factor threshold that was passed into the constructor when
	 * creating the instance of the HashTable. When the current load factor is
	 * greater than or equal to the specified load factor threshold, the table is
	 * resized and elements are rehashed.
	 */
	@Override
	public double getLoadFactorThreshold() {
		return size / capacity;
	}

	/**
	 * Returns the current load factor for this hash table
	 */
	@Override
	public double getLoadFactor() {
		return this.loadFactor;
	}

	/**
	 * Capacity of the hashtable
	 */
	@Override
	public int getCapacity() {
		return capacity;
	}

	/**
	 * Collision resolution scheme array of linked nodes is implemented using
	 * chained buckets where each bucket in Hashtable which can contain any number
	 * of keys
	 * 
	 * Chained Buckets: Hashtable contains list of keys at every index Once we get
	 * to bucket we linearly search through list for the desired item
	 * 
	 */
	@Override
	public int getCollisionResolution() {
		return 5;
	}

}